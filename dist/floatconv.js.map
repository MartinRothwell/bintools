{"version":3,"sources":["floatconv.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","binary_input","decimal_input","bits","pad","_conv","_twoscomp","document","getElementById","s","char","addEventListener","bin","this","value","replace","sign","substr","exp","mantissa","console","log","bin2dec","twoscomp","Math","pow","dec","dec2bin","_i","int","floor","repeat","./lib/conv","./lib/twoscomp","2","Object","defineProperty","hex2dec","dec2hex","indexOf","parts","split","mant","j","reverse","join","mant_limit","isNaN","bin_mant","hex","charAt","toUpperCase","digit","3","orig","comp"],"mappings":"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","file":"floatconv.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _conv = require(\"./lib/conv\");\n\nvar _twoscomp = require(\"./lib/twoscomp\");\n\n(function () {\n  var binary_input = document.getElementById('binary');\n  var decimal_input = document.getElementById('decimal');\n  var bits = {\n    sign: 1,\n    exp: 3,\n    mantissa: 5\n  };\n  /**\n   * Pad a string with a leading character so it\n   * is a fixed length\n   * @param {string|number} s String to pad\n   * @param {number} length Desired length of string\n   * @param {string} [char] Character pad with\n   * @returns {string}\n   */\n\n  var pad = function pad(s, length, char) {\n    s += '';\n    char = char || '0';\n\n    while (s.length < length) {\n      s = char + s;\n    }\n\n    return s;\n  };\n\n  binary_input.addEventListener('input', function () {\n    var bin = this.value.replace(/[^01]/g, '');\n\n    if (bin.length > bits.sign + bits.exp + bits.mantissa) {\n      decimal_input.value = 'too many bits';\n      return;\n    }\n\n    if (bin.length < bits.sign + bits.exp + bits.mantissa) {\n      decimal_input.value = 'not enough bits';\n      return;\n    }\n\n    var sign = bin.substr(0, bits.sign);\n    var exp = bin.substr(bits.sign, bits.exp);\n    var mantissa = bin.substr(bits.sign + bits.exp, bits.mantissa);\n    console.log('sign: ' + sign); // Convert exponent to two's complement decimal\n\n    console.log('exp: ' + exp);\n\n    if (exp[0] === '1') {\n      exp = (0, _conv.bin2dec)((0, _twoscomp.twoscomp)(exp)) * -1;\n    } else {\n      exp = (0, _conv.bin2dec)(exp);\n    }\n\n    console.log('exp: ' + exp); // Convert mantissa to decimal\n\n    mantissa /= Math.pow(10, mantissa.length);\n    console.log('mantissa: ' + mantissa);\n    mantissa = (0, _conv.bin2dec)(mantissa + '');\n    console.log('mantissa: ' + mantissa); // Calculate decimal number\n\n    var dec = mantissa * Math.pow(2, exp * 1);\n\n    if (sign === '1') {\n      dec *= -1;\n    }\n\n    decimal_input.value = dec;\n    console.log();\n  });\n  decimal_input.addEventListener('input', function () {\n    var dec = this.value.replace(/[^\\d.\\-+]/g, '') * 1; // calculate sign\n\n    var sign = '0';\n\n    if (dec < 0) {\n      sign = '1';\n      dec *= -1;\n    } // convert to binary\n\n\n    var exp = 0;\n    var mantissa = (0, _conv.dec2bin)(dec); // normalise mantissa\n\n    if (mantissa < 1) {\n      mantissa = mantissa.replace(/^0./, '');\n\n      for (var _i = 0; mantissa[_i] === '0'; ++_i, --exp) {}\n\n      mantissa = mantissa.substr(i);\n    } else {\n      // calculate exponent\n      var int = Math.floor(mantissa * 1) + '';\n      exp = '0' === int ? 0 : int.length;\n      mantissa = mantissa.replace(/^0+|0+$|\\./g, '');\n    } // convert to required size\n\n\n    mantissa = mantissa.substr(0, bits.mantissa);\n    mantissa += '0'.repeat(bits.mantissa - mantissa.length); // convert exponent to binary\n\n    if (exp < 0) {\n      exp = (0, _conv.dec2bin)(-exp);\n      exp = (0, _twoscomp.twoscomp)(pad(exp, bits.exp));\n    } else {\n      exp = pad((0, _conv.dec2bin)(exp), bits.exp);\n    } // display result\n\n\n    binary_input.value = sign + ' ' + exp + ' ' + mantissa;\n  });\n})();\n\n},{\"./lib/conv\":2,\"./lib/twoscomp\":3}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hex2dec = exports.dec2hex = exports.dec2bin = exports.bin2dec = void 0;\n\n/**\n * Convert a binary string into its base 10 equivalent\n * @param {string} bin The number in base 2\n * @returns {number} The number in base 10\n */\nvar bin2dec = function bin2dec(bin) {\n  var dec = 0;\n  bin = bin.replace(/\\s/g, ''); // Convert the fractional part first\n\n  if (bin.indexOf('.') !== -1) {\n    var parts = bin.split('.');\n    var mant = parts[1];\n    bin = parts[0];\n\n    for (var j = 0; j < mant.length; ++j) {\n      if (mant[j] === '1') {\n        dec += 1 / Math.pow(2, j + 1);\n      }\n    }\n  }\n\n  bin = bin.split('').reverse().join('');\n\n  for (var i = bin.length - 1; i >= 0; --i) {\n    if (bin[i] === '1') {\n      dec += Math.pow(2, i);\n    }\n  }\n\n  return dec;\n};\n/**\n * Convert a decimal number into its binary equivalent\n * @param {number} dec The number in base 2\n * @param {number} [mant_limit] The maximum number of bits to use in the mantissa\n * @returns {string} The number in base 10\n */\n\n\nexports.bin2dec = bin2dec;\n\nvar dec2bin = function dec2bin(dec, mant_limit) {\n  var bin = [];\n  dec *= 1;\n\n  if (isNaN(dec) || dec === 0) {\n    return '0';\n  } // Convert the fractional part first\n\n\n  if (Math.floor(dec) !== dec) {\n    var bin_mant = '.';\n    var mant = dec % 1;\n\n    for (var j = 0; mant !== 0 && (!mant_limit || j < mant_limit); ++j) {\n      mant *= 2;\n      bin_mant += Math.floor(mant);\n      mant %= 1;\n    }\n\n    return dec2bin(Math.floor(dec)) + bin_mant;\n  } // find biggest significant figure\n\n\n  var pow = Math.floor(Math.log(dec) / Math.log(2));\n\n  while (pow >= 0) {\n    if (dec - Math.pow(2, pow) >= 0) {\n      dec -= Math.pow(2, pow);\n      bin[pow] = '1';\n    } else {\n      bin[pow] = '0';\n    }\n\n    --pow;\n  }\n\n  return bin.reverse().join('');\n};\n/**\n * Convert a decimal number into its hexadecimal equivalent\n * @param {number} dec The number in base 10\n * @returns {string} The number in base 16\n */\n\n\nexports.dec2bin = dec2bin;\n\nvar dec2hex = function dec2hex(dec) {\n  var alpha = '0123456789ABCDEF';\n  var hex = [];\n  dec = Math.floor(dec);\n\n  if (dec === 0) {\n    return '0';\n  } // find biggest significant figure\n\n\n  var pow = Math.floor(Math.log(dec) / Math.log(16));\n\n  while (pow >= 0) {\n    hex[pow] = Math.floor(dec / Math.pow(16, pow));\n    hex[pow] = alpha.charAt(hex[pow]);\n    dec %= Math.pow(16, pow);\n    --pow;\n  }\n\n  return hex.reverse().join('');\n};\n/**\n * Convert a hexadecimal number into its decimal equivalent\n * @param {string} hex The number in base 16\n * @returns {number} The number in base 10\n */\n\n\nexports.dec2hex = dec2hex;\n\nvar hex2dec = function hex2dec(hex) {\n  var alpha = '0123456789ABCDEF';\n  var dec = 0;\n  hex = hex.toUpperCase();\n  hex = hex.split('').reverse().join('');\n\n  for (var i = hex.length - 1; i >= 0; --i) {\n    var digit = alpha.indexOf(hex[i]);\n    dec += Math.pow(16, i) * digit;\n  }\n\n  return dec;\n};\n\nexports.hex2dec = hex2dec;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.twoscomp = void 0;\n\n/**\n * Find the two's complement of a binary number\n * @param {string} bin The original decimal number\n * @returns {string} The two's complement\n */\nvar twoscomp = function twoscomp(bin) {\n  var orig = bin.split('').reverse();\n  var bits = orig.length;\n  var comp = [];\n  var i = 0;\n\n  while (i < bits && orig[i] !== '1') {\n    comp[i] = orig[i];\n    ++i;\n  }\n\n  if (i >= bits) {\n    return comp.reverse().join('');\n  }\n\n  comp[i] = '1';\n  ++i;\n\n  while (i < bits) {\n    if (orig[i] === '1') {\n      comp[i] = '0';\n    } else if (orig[i] === '0') {\n      comp[i] = '1';\n    } else {\n      comp[i] = orig[i];\n    }\n\n    ++i;\n  }\n\n  return comp.reverse().join('');\n};\n\nexports.twoscomp = twoscomp;\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}