{"version":3,"sources":["hexconv.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_format","_conv","hex_input","document","getElementById","dec_input","bin_input","update","dec","value","format_dec","dec2hex","format_bin","dec2bin","addEventListener","hex","this","replace","hex2dec","bin","bin2dec","./lib/conv","./lib/format","2","Object","defineProperty","indexOf","parts","split","mant","j","Math","pow","reverse","join","mant_limit","isNaN","floor","bin_mant","log","charAt","toUpperCase","digit","3","mantissa","padding","repeat","trim","bits","console"],"mappings":"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","file":"hexconv.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _format = require(\"./lib/format\");\n\nvar _conv = require(\"./lib/conv\");\n\nvar hex_input = document.getElementById('hex');\nvar dec_input = document.getElementById('dec');\nvar bin_input = document.getElementById('bin');\n\nvar update = function update(dec) {\n  dec_input.value = (0, _format.format_dec)(dec);\n  hex_input.value = (0, _conv.dec2hex)(dec);\n  bin_input.value = (0, _format.format_bin)((0, _conv.dec2bin)(dec));\n};\n\nupdate('0');\nhex_input.addEventListener('input', function () {\n  var hex = this.value.replace(/[^0-9a-fA-F]/g, '');\n  var dec = (0, _conv.hex2dec)(hex);\n  update(dec);\n});\ndec_input.addEventListener('input', function () {\n  var dec = this.value.replace(/[^\\d.]/g, '');\n  update(dec);\n});\nbin_input.addEventListener('input', function () {\n  var bin = this.value.replace(/[^01.]/, '');\n  var dec = (0, _conv.bin2dec)(bin);\n  update(dec);\n});\n\n},{\"./lib/conv\":2,\"./lib/format\":3}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hex2dec = exports.dec2hex = exports.dec2bin = exports.bin2dec = void 0;\n\n/**\n * Convert a binary string into its base 10 equivalent\n * @param {string} bin The number in base 2\n * @returns {number} The number in base 10\n */\nvar bin2dec = function bin2dec(bin) {\n  var dec = 0;\n  bin = bin.replace(/\\s/g, ''); // Convert the fractional part first\n\n  if (bin.indexOf('.') !== -1) {\n    var parts = bin.split('.');\n    var mant = parts[1];\n    bin = parts[0];\n\n    for (var j = 0; j < mant.length; ++j) {\n      if (mant[j] === '1') {\n        dec += 1 / Math.pow(2, j + 1);\n      }\n    }\n  }\n\n  bin = bin.split('').reverse().join('');\n\n  for (var i = bin.length - 1; i >= 0; --i) {\n    if (bin[i] === '1') {\n      dec += Math.pow(2, i);\n    }\n  }\n\n  return dec;\n};\n/**\n * Convert a decimal number into its binary equivalent\n * @param {number} dec The number in base 2\n * @param {number} [mant_limit] The maximum number of bits to use in the mantissa\n * @returns {string} The number in base 10\n */\n\n\nexports.bin2dec = bin2dec;\n\nvar dec2bin = function dec2bin(dec, mant_limit) {\n  var bin = [];\n  dec *= 1;\n\n  if (isNaN(dec) || dec === 0) {\n    return '0';\n  } // Convert the fractional part first\n\n\n  if (Math.floor(dec) !== dec) {\n    var bin_mant = '.';\n    var mant = dec % 1;\n\n    for (var j = 0; mant !== 0 && (!mant_limit || j < mant_limit); ++j) {\n      mant *= 2;\n      bin_mant += Math.floor(mant);\n      mant %= 1;\n    }\n\n    return dec2bin(Math.floor(dec)) + bin_mant;\n  } // find biggest significant figure\n\n\n  var pow = Math.floor(Math.log(dec) / Math.log(2));\n\n  while (pow >= 0) {\n    if (dec - Math.pow(2, pow) >= 0) {\n      dec -= Math.pow(2, pow);\n      bin[pow] = '1';\n    } else {\n      bin[pow] = '0';\n    }\n\n    --pow;\n  }\n\n  return bin.reverse().join('');\n};\n/**\n * Convert a decimal number into its hexadecimal equivalent\n * @param {number} dec The number in base 10\n * @returns {string} The number in base 16\n */\n\n\nexports.dec2bin = dec2bin;\n\nvar dec2hex = function dec2hex(dec) {\n  var alpha = '0123456789ABCDEF';\n  var hex = [];\n  dec = Math.floor(dec);\n\n  if (dec === 0) {\n    return '0';\n  } // find biggest significant figure\n\n\n  var pow = Math.floor(Math.log(dec) / Math.log(16));\n\n  while (pow >= 0) {\n    hex[pow] = Math.floor(dec / Math.pow(16, pow));\n    hex[pow] = alpha.charAt(hex[pow]);\n    dec %= Math.pow(16, pow);\n    --pow;\n  }\n\n  return hex.reverse().join('');\n};\n/**\n * Convert a hexadecimal number into its decimal equivalent\n * @param {string} hex The number in base 16\n * @returns {number} The number in base 10\n */\n\n\nexports.dec2hex = dec2hex;\n\nvar hex2dec = function hex2dec(hex) {\n  var alpha = '0123456789ABCDEF';\n  var dec = 0;\n  hex = hex.toUpperCase();\n  hex = hex.split('').reverse().join('');\n\n  for (var i = hex.length - 1; i >= 0; --i) {\n    var digit = alpha.indexOf(hex[i]);\n    dec += Math.pow(16, i) * digit;\n  }\n\n  return dec;\n};\n\nexports.hex2dec = hex2dec;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.format_bin = exports.format_dec = void 0;\n\n/**\n * Format a decimal number for display.\n * Adds column separators and removes leading zeros.\n *\n * @param {string} dec The unformatted decimal number\n * @returns {string} The formatted number\n */\nvar format_dec = function format_dec(dec) {\n  var mantissa = ''; // convert to string\n\n  dec += ''; // remove columns\n\n  dec = dec.replace(/\\s/g, ''); // remove mantissa\n\n  if (dec.indexOf('.') !== -1) {\n    var parts = dec.split('.');\n    mantissa += '.' + parts[1];\n    dec = parts[0];\n  } // remove leading zeros\n\n\n  dec = dec.replace(/^0+([1-9])/, '$1'); // add columns\n\n  var padding = 3 - dec.length % 3;\n  if (padding === 3) padding = 0;\n  dec = ' '.repeat(padding) + dec;\n  dec = dec.replace(/(.{3})/g, '$1 ').trim();\n  return dec + mantissa;\n};\n/**\n * Format a binary number by padding it out with zeros and adding column separators\n * @param {string} bin The unformatted binary number\n * @param {number} [bits] Force number to occupy a set number of bits\n * @returns {string} The formatted binary number\n */\n\n\nexports.format_dec = format_dec;\n\nvar format_bin = function format_bin(bin, bits) {\n  var mantissa = '';\n  bin += ''; // remove columns\n\n  bin = bin.replace(/\\s/g, ''); // remove mantissa\n\n  if (bin.indexOf('.') !== -1) {\n    var parts = bin.split('.');\n    console.log(parts);\n    mantissa = '.' + parts[1];\n    bin = parts[0];\n  } // remove leading zeros\n\n\n  bin = bin.replace(/^0+([^0])/, '$1');\n  var padding = 0;\n\n  if (bits) {\n    padding = bits - bin.length;\n  } else {\n    padding = 4 - bin.length % 4;\n    if (padding === 4) padding = 0;\n  }\n\n  bin = '0'.repeat(padding) + bin;\n  bin = bin.replace(/(.{4})/g, '$1 ').trim();\n  return bin + mantissa;\n};\n\nexports.format_bin = format_bin;\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}