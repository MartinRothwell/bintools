{"version":3,"sources":["float.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_conv","_twoscomp","pad","s","char","append","substr","app","angular","filter","input","output","_i","controller","$scope","bits","sign","exp","mantissa","decimal","exp_format","word_len","arguments","convert_decimal","dec","Math","abs","dec2bin","initial_mantissa","replace","_i2","int","floor","mantissa_decimal","bin2dec","negative_exp","exp_decimal","twoscomp","converted_result","console","log","pow","float2dec","$watch","parseFloat","isNaN","./lib/conv","./lib/twoscomp","2","Object","defineProperty","value","hex2dec","dec2hex","bin","indexOf","parts","split","mant","j","reverse","join","mant_limit","bin_mant","hex","charAt","toUpperCase","digit","3","orig","comp"],"mappings":"CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAEA,IAAIK,EAAQX,EAAQ,cAEhBY,EAAYZ,EAAQ,kBAUpBa,EAAM,SAAaC,EAAGN,EAAQO,EAAMC,GAItC,GAFAD,EAAOA,GAAQ,KADfD,GAAK,IAGCN,OAASA,EACb,OAAOM,EAAEG,OAAO,EAAGT,GAGrB,KAAOM,EAAEN,OAASA,GAChBM,EAAIE,EAASF,EAAIC,EAAOA,EAAOD,EAGjC,OAAOA,GAQLI,EAAMC,QAAQT,OAAO,MAAO,CAAC,eAKjCQ,EAAIE,OAAO,cAAe,WACxB,OAAO,SAAUC,GAGf,IAFA,IAAIC,EAAS,GAEJC,EAAK,EAAGA,EAAKF,EAAMb,SAAUe,EACpCD,GAAU,qBAAuBD,EAAME,GAAM,UAG/C,OAAOD,KAOXJ,EAAIM,WAAW,iBAAkB,CAAC,SAAU,SAAUC,GACpDA,EAAOC,KAAO,CACZC,MAAM,EACNC,IAAK,EACLC,SAAU,GAEZJ,EAAOK,QAAU,EACjBL,EAAOM,WAAa,OAEpBN,EAAOO,SAAW,SAAUxB,GAC1B,OAAIyB,UAAUzB,QACZiB,EAAOC,KAAKG,UAAYrB,EAASiB,EAAOO,WAEpCP,EAAOC,KAAKG,SAAW,IACzBJ,EAAOC,KAAKE,KAAOH,EAAOC,KAAKG,SAC/BJ,EAAOC,KAAKG,SAAW,GAGlBrB,IAGDiB,EAAOC,KAAKC,KAAO,EAAI,GAAKF,EAAOC,KAAKE,IAAMH,EAAOC,KAAKG,UAGpE,IA2BIK,EAAkB,SAAyBC,GAE7CV,EAAOE,KAAOQ,EAAM,EAAI,IAAM,IAC9BA,EAAMC,KAAKC,IAAIF,GAEf,IAAIP,EAAM,EACNC,GAAW,EAAIlB,EAAM2B,SAASH,EAAKV,EAAOC,KAAKG,UAGnD,GAAiB,OAFjBJ,EAAOc,iBAAmBV,SAEI,GAAIA,EAAW,EAAG,CAC9CA,EAAWA,EAASW,QAAQ,MAAO,IAEnC,IAAK,IAAIC,EAAM,EAAqB,MAAlBZ,EAASY,KAAgBA,IAAOb,GAElDC,EAAWA,EAASZ,OAAOpB,OACtB,CAEL,IAAI6C,EAAMN,KAAKO,MAAiB,EAAXd,GAAgB,GACrCD,EAAM,KAAQc,EAAM,EAAIA,EAAIlC,OAC5BqB,EAAWA,EAASW,QAAQ,cAAe,IAI7CX,EAAWhB,EAAIgB,EAAUJ,EAAOC,KAAKG,SAAU,KAAK,GACpDJ,EAAOI,SAAWA,EAClBJ,EAAOmB,kBAAmB,EAAIjC,EAAMkC,SAAS,KAAOhB,GAEpD,IAAIiB,GADJrB,EAAOsB,YAAcnB,GACI,EACzBA,GAAM,EAAIjB,EAAM2B,SAASF,KAAKC,IAAIT,IAER,WAAtBH,EAAOM,aACTH,GAAOkB,EAAe,IAAM,KAAOlB,GAGrCA,EAAMf,EAAIe,EAAKH,EAAOC,KAAKE,IAAK,KAE5BkB,GAAsC,SAAtBrB,EAAOM,aACzBH,GAAM,EAAIhB,EAAUoC,UAAUpB,IAGhCH,EAAOG,IAAMA,EAEbH,EAAOwB,iBArEO,SAAmBtB,EAAMC,EAAKC,GAC5CqB,QAAQC,IAAIxB,EAAO,IAAMC,EAAM,IAAMC,GAGnCD,EADa,MAAXA,EAAI,IACoD,GAApD,EAAIjB,EAAMkC,UAAS,EAAIjC,EAAUoC,UAAUpB,KAE3C,EAAIjB,EAAMkC,SAASjB,GAI3BC,GAAYO,KAAKgB,IAAI,GAAIvB,EAASrB,QAGlC,IAAI2B,GAFJN,GAAW,EAAIlB,EAAMkC,SAAShB,EAAW,KAEpBO,KAAKgB,IAAI,EAAS,EAANxB,GAMjC,MAJa,MAATD,IACFQ,IAAQ,GAGHA,EAkDmBkB,CAAU5B,EAAOE,KAAMF,EAAOG,IAAKH,EAAOI,WAGtEK,EAAgB,GAChBT,EAAO6B,OAAO,WACZ,IAAInB,EAAMV,EAAOK,QACjBK,EAAMoB,WAAWpB,GAEbqB,MAAMrB,KACRe,QAAQC,IAAIhB,EAAM,0BAClBA,EAAM,GAGRD,EAAgBC,SAIlB,CAACsB,aAAa,EAAEC,iBAAiB,IAAIC,EAAE,CAAC,SAAS3D,EAAQU,EAAOJ,GAClE,aAEAsD,OAAOC,eAAevD,EAAS,aAAc,CAC3CwD,OAAO,IAETxD,EAAQyD,QAAUzD,EAAQ0D,QAAU1D,EAAQgC,QAAUhC,EAAQuC,aAAU,EAyCxEvC,EAAQuC,QAlCM,SAAiBoB,GAC7B,IAAI9B,EAAM,EAGV,IAA0B,KAF1B8B,EAAMA,EAAIzB,QAAQ,MAAO,KAEjB0B,QAAQ,KAAa,CAC3B,IAAIC,EAAQF,EAAIG,MAAM,KAClBC,EAAOF,EAAM,GACjBF,EAAME,EAAM,GAEZ,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAK7D,SAAU8D,EACjB,MAAZD,EAAKC,KACPnC,GAAO,EAAIC,KAAKgB,IAAI,EAAGkB,EAAI,IAOjC,IAAK,IAAIzE,GAFToE,EAAMA,EAAIG,MAAM,IAAIG,UAAUC,KAAK,KAElBhE,OAAS,EAAQ,GAALX,IAAUA,EACtB,MAAXoE,EAAIpE,KACNsC,GAAOC,KAAKgB,IAAI,EAAGvD,IAIvB,OAAOsC,GAyDT7B,EAAQgC,QA7CM,SAASA,EAAQH,EAAKsC,GAClC,IAAIR,EAAM,GAGV,GAFA9B,GAAO,EAEHqB,MAAMrB,IAAgB,IAARA,EAChB,MAAO,IAIT,GAAIC,KAAKO,MAAMR,KAASA,EAAK,CAI3B,IAHA,IAAIuC,EAAW,IACXL,EAAOlC,EAAM,EAERmC,EAAI,EAAY,IAATD,KAAgBI,GAAcH,EAAIG,KAAeH,EAC/DD,GAAQ,EACRK,GAAYtC,KAAKO,MAAM0B,GACvBA,GAAQ,EAGV,OAAO/B,EAAQF,KAAKO,MAAMR,IAAQuC,EAMpC,IAFA,IAAItB,EAAMhB,KAAKO,MAAMP,KAAKe,IAAIhB,GAAOC,KAAKe,IAAI,IAEhC,GAAPC,GACyB,GAA1BjB,EAAMC,KAAKgB,IAAI,EAAGA,IACpBjB,GAAOC,KAAKgB,IAAI,EAAGA,GACnBa,EAAIb,GAAO,KAEXa,EAAIb,GAAO,MAGXA,EAGJ,OAAOa,EAAIM,UAAUC,KAAK,KAuC5BlE,EAAQ0D,QA5BM,SAAiB7B,GAC7B,IACIwC,EAAM,GAGV,GAAY,KAFZxC,EAAMC,KAAKO,MAAMR,IAGf,MAAO,IAMT,IAFA,IAAIiB,EAAMhB,KAAKO,MAAMP,KAAKe,IAAIhB,GAAOC,KAAKe,IAAI,KAEhC,GAAPC,GACLuB,EAAIvB,GAAOhB,KAAKO,MAAMR,EAAMC,KAAKgB,IAAI,GAAIA,IACzCuB,EAAIvB,GAbM,mBAaOwB,OAAOD,EAAIvB,IAC5BjB,GAAOC,KAAKgB,IAAI,GAAIA,KAClBA,EAGJ,OAAOuB,EAAIJ,UAAUC,KAAK,KAyB5BlE,EAAQyD,QAdM,SAAiBY,GAM7B,IALA,IACIxC,EAAM,EAIDtC,GAFT8E,GADAA,EAAMA,EAAIE,eACAT,MAAM,IAAIG,UAAUC,KAAK,KAElBhE,OAAS,EAAQ,GAALX,IAAUA,EAAG,CACxC,IAAIiF,EANM,mBAMQZ,QAAQS,EAAI9E,IAC9BsC,GAAOC,KAAKgB,IAAI,GAAIvD,GAAKiF,EAG3B,OAAO3C,IAKP,IAAI4C,EAAE,CAAC,SAAS/E,EAAQU,EAAOJ,GACjC,aAEAsD,OAAOC,eAAevD,EAAS,aAAc,CAC3CwD,OAAO,IAETxD,EAAQ0C,cAAW,EAwCnB1C,EAAQ0C,SAjCO,SAAkBiB,GAM/B,IALA,IAAIe,EAAOf,EAAIG,MAAM,IAAIG,UACrB7C,EAAOsD,EAAKxE,OACZyE,EAAO,GACPpF,EAAI,EAEDA,EAAI6B,GAAoB,MAAZsD,EAAKnF,IACtBoF,EAAKpF,GAAKmF,EAAKnF,KACbA,EAGJ,GAAS6B,GAAL7B,EACF,OAAOoF,EAAKV,UAAUC,KAAK,IAM7B,IAHAS,EAAKpF,GAAK,MACRA,EAEKA,EAAI6B,GACO,MAAZsD,EAAKnF,GACPoF,EAAKpF,GAAK,IACW,MAAZmF,EAAKnF,GACdoF,EAAKpF,GAAK,IAEVoF,EAAKpF,GAAKmF,EAAKnF,KAGfA,EAGJ,OAAOoF,EAAKV,UAAUC,KAAK,MAK3B,KAAK,GAAG,CAAC","file":"float.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _conv = require(\"./lib/conv\");\n\nvar _twoscomp = require(\"./lib/twoscomp\");\n\n/**\n * Pad a string so it is a fixed length\n * @param {String} s - The string to pad\n * @param {Number} length - The desired length\n * @param {String} [char=0] - The character used for padding\n * @param {Boolean} [append=false] - Whether to prepend or append padding\n * @returns {String} The string at the desired length\n */\nvar pad = function pad(s, length, char, append) {\n  s += '';\n  char = char || '0';\n\n  if (s.length > length) {\n    return s.substr(0, length);\n  }\n\n  while (s.length < length) {\n    s = append ? s + char : char + s;\n  }\n\n  return s;\n};\n/**\n * The main app module\n * @type {angular.Module}\n */\n\n\nvar app = angular.module('app', ['ngSanitize']);\n/**\n * Angular filter to format a string of bits as blocks\n */\n\napp.filter('format_bits', function () {\n  return function (input) {\n    var output = '';\n\n    for (var _i = 0; _i < input.length; ++_i) {\n      output += '<span class=\"bit\">' + input[_i] + '</span>';\n    }\n\n    return output;\n  };\n});\n/**\n * The main controller\n */\n\napp.controller('FloatConverter', ['$scope', function ($scope) {\n  $scope.bits = {\n    sign: true,\n    exp: 3,\n    mantissa: 5\n  };\n  $scope.decimal = 0;\n  $scope.exp_format = 'twos';\n\n  $scope.word_len = function (length) {\n    if (arguments.length) {\n      $scope.bits.mantissa += length - $scope.word_len();\n\n      if ($scope.bits.mantissa < 1) {\n        $scope.bits.exp += $scope.bits.mantissa;\n        $scope.bits.mantissa = 1;\n      }\n\n      return length;\n    }\n\n    return ($scope.bits.sign ? 1 : 0) + $scope.bits.exp + $scope.bits.mantissa;\n  };\n\n  var float2dec = function float2dec(sign, exp, mantissa) {\n    console.log(sign + ' ' + exp + ' ' + mantissa); // Convert exponent to two's complement decimal\n\n    if (exp[0] === '1') {\n      exp = (0, _conv.bin2dec)((0, _twoscomp.twoscomp)(exp)) * -1;\n    } else {\n      exp = (0, _conv.bin2dec)(exp);\n    } // Convert mantissa to decimal\n\n\n    mantissa /= Math.pow(10, mantissa.length);\n    mantissa = (0, _conv.bin2dec)(mantissa + ''); // Calculate decimal number\n\n    var dec = mantissa * Math.pow(2, exp * 1);\n\n    if (sign === '1') {\n      dec *= -1;\n    }\n\n    return dec;\n  };\n  /**\n   * Converts a decimal to floating point binary\n   * @param dec\n   */\n\n\n  var convert_decimal = function convert_decimal(dec) {\n    // calculate sign\n    $scope.sign = dec < 0 ? '1' : '0';\n    dec = Math.abs(dec); // convert to binary\n\n    var exp = 0;\n    var mantissa = (0, _conv.dec2bin)(dec, $scope.bits.mantissa);\n    $scope.initial_mantissa = mantissa; // normalise mantissa\n\n    if (mantissa === '0') {} else if (mantissa < 1) {\n      mantissa = mantissa.replace(/^0./, '');\n\n      for (var _i2 = 0; mantissa[_i2] === '0'; ++_i2, --exp) {}\n\n      mantissa = mantissa.substr(i);\n    } else {\n      // calculate exponent\n      var int = Math.floor(mantissa * 1) + '';\n      exp = '0' === int ? 0 : int.length;\n      mantissa = mantissa.replace(/^0+|0+$|\\./g, '');\n    } // convert to required size\n\n\n    mantissa = pad(mantissa, $scope.bits.mantissa, '0', true);\n    $scope.mantissa = mantissa;\n    $scope.mantissa_decimal = (0, _conv.bin2dec)('0.' + mantissa);\n    $scope.exp_decimal = exp;\n    var negative_exp = exp < 0;\n    exp = (0, _conv.dec2bin)(Math.abs(exp)); // convert exponent to signed magnitude\n\n    if ($scope.exp_format === 'signed') {\n      exp = (negative_exp ? '1' : '0') + exp;\n    }\n\n    exp = pad(exp, $scope.bits.exp, '0'); // convert exponent to two's complement\n\n    if (negative_exp && $scope.exp_format === 'twos') {\n      exp = (0, _twoscomp.twoscomp)(exp);\n    }\n\n    $scope.exp = exp; // convert the result back to decimal\n\n    $scope.converted_result = float2dec($scope.sign, $scope.exp, $scope.mantissa);\n  };\n\n  convert_decimal(0);\n  $scope.$watch(function () {\n    var dec = $scope.decimal;\n    dec = parseFloat(dec);\n\n    if (isNaN(dec)) {\n      console.log(dec + ' is not a valid number');\n      dec = 0;\n    }\n\n    convert_decimal(dec);\n  });\n}]);\n\n},{\"./lib/conv\":2,\"./lib/twoscomp\":3}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hex2dec = exports.dec2hex = exports.dec2bin = exports.bin2dec = void 0;\n\n/**\n * Convert a binary string into its base 10 equivalent\n * @param {string} bin The number in base 2\n * @returns {number} The number in base 10\n */\nvar bin2dec = function bin2dec(bin) {\n  var dec = 0;\n  bin = bin.replace(/\\s/g, ''); // Convert the fractional part first\n\n  if (bin.indexOf('.') !== -1) {\n    var parts = bin.split('.');\n    var mant = parts[1];\n    bin = parts[0];\n\n    for (var j = 0; j < mant.length; ++j) {\n      if (mant[j] === '1') {\n        dec += 1 / Math.pow(2, j + 1);\n      }\n    }\n  }\n\n  bin = bin.split('').reverse().join('');\n\n  for (var i = bin.length - 1; i >= 0; --i) {\n    if (bin[i] === '1') {\n      dec += Math.pow(2, i);\n    }\n  }\n\n  return dec;\n};\n/**\n * Convert a decimal number into its binary equivalent\n * @param {number} dec The number in base 2\n * @param {number} [mant_limit] The maximum number of bits to use in the mantissa\n * @returns {string} The number in base 10\n */\n\n\nexports.bin2dec = bin2dec;\n\nvar dec2bin = function dec2bin(dec, mant_limit) {\n  var bin = [];\n  dec *= 1;\n\n  if (isNaN(dec) || dec === 0) {\n    return '0';\n  } // Convert the fractional part first\n\n\n  if (Math.floor(dec) !== dec) {\n    var bin_mant = '.';\n    var mant = dec % 1;\n\n    for (var j = 0; mant !== 0 && (!mant_limit || j < mant_limit); ++j) {\n      mant *= 2;\n      bin_mant += Math.floor(mant);\n      mant %= 1;\n    }\n\n    return dec2bin(Math.floor(dec)) + bin_mant;\n  } // find biggest significant figure\n\n\n  var pow = Math.floor(Math.log(dec) / Math.log(2));\n\n  while (pow >= 0) {\n    if (dec - Math.pow(2, pow) >= 0) {\n      dec -= Math.pow(2, pow);\n      bin[pow] = '1';\n    } else {\n      bin[pow] = '0';\n    }\n\n    --pow;\n  }\n\n  return bin.reverse().join('');\n};\n/**\n * Convert a decimal number into its hexadecimal equivalent\n * @param {number} dec The number in base 10\n * @returns {string} The number in base 16\n */\n\n\nexports.dec2bin = dec2bin;\n\nvar dec2hex = function dec2hex(dec) {\n  var alpha = '0123456789ABCDEF';\n  var hex = [];\n  dec = Math.floor(dec);\n\n  if (dec === 0) {\n    return '0';\n  } // find biggest significant figure\n\n\n  var pow = Math.floor(Math.log(dec) / Math.log(16));\n\n  while (pow >= 0) {\n    hex[pow] = Math.floor(dec / Math.pow(16, pow));\n    hex[pow] = alpha.charAt(hex[pow]);\n    dec %= Math.pow(16, pow);\n    --pow;\n  }\n\n  return hex.reverse().join('');\n};\n/**\n * Convert a hexadecimal number into its decimal equivalent\n * @param {string} hex The number in base 16\n * @returns {number} The number in base 10\n */\n\n\nexports.dec2hex = dec2hex;\n\nvar hex2dec = function hex2dec(hex) {\n  var alpha = '0123456789ABCDEF';\n  var dec = 0;\n  hex = hex.toUpperCase();\n  hex = hex.split('').reverse().join('');\n\n  for (var i = hex.length - 1; i >= 0; --i) {\n    var digit = alpha.indexOf(hex[i]);\n    dec += Math.pow(16, i) * digit;\n  }\n\n  return dec;\n};\n\nexports.hex2dec = hex2dec;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.twoscomp = void 0;\n\n/**\n * Find the two's complement of a binary number\n * @param {string} bin The original decimal number\n * @returns {string} The two's complement\n */\nvar twoscomp = function twoscomp(bin) {\n  var orig = bin.split('').reverse();\n  var bits = orig.length;\n  var comp = [];\n  var i = 0;\n\n  while (i < bits && orig[i] !== '1') {\n    comp[i] = orig[i];\n    ++i;\n  }\n\n  if (i >= bits) {\n    return comp.reverse().join('');\n  }\n\n  comp[i] = '1';\n  ++i;\n\n  while (i < bits) {\n    if (orig[i] === '1') {\n      comp[i] = '0';\n    } else if (orig[i] === '0') {\n      comp[i] = '1';\n    } else {\n      comp[i] = orig[i];\n    }\n\n    ++i;\n  }\n\n  return comp.reverse().join('');\n};\n\nexports.twoscomp = twoscomp;\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}